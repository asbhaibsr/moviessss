from pyrogram import Client, filters
import datetime
import time
from database.users_chats_db import db
from info import ADMINS
from utils import users_broadcast, groups_broadcast, temp, get_readable_time
import asyncio
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup 

# üõ†Ô∏è ‡§∏‡•Å‡§ß‡§æ‡§∞ 1: ‡§è‡§ï ‡§≤‡•â‡§ï ‡§ï‡•Ä ‡§ú‡§ó‡§π ‡§¶‡•ã ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó ‡§≤‡•â‡§ï ‡§¨‡§®‡§æ‡§è ‡§ó‡§è ‡§π‡•à‡§Ç
users_lock = asyncio.Lock()
groups_lock = asyncio.Lock()

@Client.on_callback_query(filters.regex(r'^broadcast_cancel'))
async def broadcast_cancel(bot, query):
    _, ident = query.data.split("#")
    if ident == 'users':
        await query.message.edit("·¥õ Ä è…™…¥…¢ ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ·¥ús·¥á Äs  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢...")
        temp.USERS_CANCEL = True
    elif ident == 'groups':
        temp.GROUPS_CANCEL = True
        await query.message.edit("·¥õ Ä è…™…¥…¢ ·¥õ·¥è ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü …¢ Ä·¥è·¥ú·¥òs  ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢...")
       
@Client.on_message(filters.command("broadcast") & filters.user(ADMINS) & filters.reply)
async def broadcast_users(bot, message):
    # üõ†Ô∏è ‡§∏‡•Å‡§ß‡§æ‡§∞ 2: users_lock ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ö‡•á‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
    if users_lock.locked(): 
        return await message.reply('Currently users broadcast processing. Wait for completion.')

    p = await message.reply('<b>Do you want pin this message in users?</b>', reply_markup=ReplyKeyboardMarkup([['Yes', 'No']], one_time_keyboard=True, resize_keyboard=True))
    msg = await bot.listen(chat_id=message.chat.id, user_id=message.from_user.id)
    if msg.text == 'Yes':
        is_pin = True
    elif msg.text == 'No':
        is_pin = False
    else:
        await p.delete()
        return await message.reply_text('Wrong Response!')
    await p.delete()
    users = await db.get_all_users()
    b_msg = message.reply_to_message
    b_sts = await message.reply_text(text='<b> ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è ·¥ús·¥á Äs ‚åõÔ∏è</b>')
    start_time = time.time()
    total_users = await db.total_users_count()
    done = 0
    blocked = 0
    deleted = 0
    failed = 0
    success = 0

    # üõ†Ô∏è ‡§∏‡•Å‡§ß‡§æ‡§∞ 3: users_lock ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
    async with users_lock:
        async for user in users:
            time_taken = get_readable_time(time.time()-start_time)
            if temp.USERS_CANCEL:
                temp.USERS_CANCEL = False
                await b_sts.edit(f"Users broadcast Cancelled!\nCompleted in {time_taken}\n\nTotal Users: <code>{total_users}</code>\nCompleted: <code>{done} / {total_users}</code>\nSuccess: <code>{success}</code>")
                return
            
            # ‡§Ø‡§π‡§æ‡§Å 'sts' ‡§Æ‡•á‡§Ç 'Blocked'/'Deleted' ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§ï‡•ã ‡§≠‡•Ä ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 
            # ‡§Ü‡§™‡§ï‡•ã 'users_broadcast' ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ, 
            # ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ö‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π 'Success' ‡§Ø‡§æ 'Error' ‡§π‡•Ä ‡§Æ‡§æ‡§®‡•á‡§ó‡§æ‡•§
            sts = await users_broadcast(int(user['id']), b_msg, is_pin)
            
            if sts == 'Success':
                success += 1
            elif sts == 'Error':
                failed += 1
            done += 1
            if not done % 20:
                btn = [[
                    InlineKeyboardButton('CANCEL', callback_data=f'broadcast_cancel#users')
                ]]
                await b_sts.edit(f"Users broadcast in progress...\n\nTotal Users: <code>{total_users}</code>\nCompleted: <code>{done} / {total_users}</code>\nSuccess: <code>{success}</code>", reply_markup=InlineKeyboardMarkup(btn))
                
        # ‚ö†Ô∏è ‡§®‡•ã‡§ü: blocked ‡§î‡§∞ deleted ‡§ï‡§æ‡§â‡§Ç‡§ü‡•ç‡§∏ ‡§ï‡•ã ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•ã 
        # users_broadcast ‡§´‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§
        await b_sts.edit(f"Users broadcast completed.\nCompleted in {time_taken}\n\nTotal Users: <code>{total_users}</code>\nCompleted: <code>{done} / {total_users}</code>\nSuccess: <code>{success}</code>\nFailed: <code>{failed}</code>")

@Client.on_message(filters.command("grp_broadcast") & filters.user(ADMINS) & filters.reply)
async def broadcast_group(bot, message):
    # üõ†Ô∏è ‡§∏‡•Å‡§ß‡§æ‡§∞ 4: groups_lock ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§ö‡•á‡§ï ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
    if groups_lock.locked():
        return await message.reply('Currently groups broadcast processing. Wait for completion.')
        
    p = await message.reply('<b>Do you want pin this message in groups?</b>', reply_markup=ReplyKeyboardMarkup([['Yes', 'No']], one_time_keyboard=True, resize_keyboard=True))
    msg = await bot.listen(chat_id=message.chat.id, user_id=message.from_user.id)
    if msg.text == 'Yes':
        is_pin = True
    elif msg.text == 'No':
        is_pin = False
    else:
        await p.delete()
        return await message.reply_text('Wrong Response!')
    await p.delete()
    chats = await db.get_all_chats()
    b_msg = message.reply_to_message
    b_sts = await message.reply_text(text='<b> ô Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ…™…¥…¢  è·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥ás ·¥õ·¥è …¢ Ä·¥è·¥ú·¥òs ‚è≥</b>')
    start_time = time.time()
    total_chats = await db.total_chat_count()
    done = 0
    failed = 0
    success = 0
    
    # üõ†Ô∏è ‡§∏‡•Å‡§ß‡§æ‡§∞ 5: groups_lock ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§ï‡•á ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à
    async with groups_lock:
        async for chat in chats:
            time_taken = get_readable_time(time.time()-start_time)
            if temp.GROUPS_CANCEL:
                temp.GROUPS_CANCEL = False
                await b_sts.edit(f"Groups broadcast Cancelled!\nCompleted in {time_taken}\n\nTotal Groups: <code>{total_chats}</code>\nCompleted: <code>{done} / {total_chats}</code>\nSuccess: <code>{success}</code>\nFailed: <code>{failed}</code>")
                return
            sts = await groups_broadcast(int(chat['id']), b_msg, is_pin)
            if sts == 'Success':
                success += 1
            elif sts == 'Error':
                failed += 1
            done += 1
            if not done % 20:
                btn = [[
                    InlineKeyboardButton('CANCEL', callback_data=f'broadcast_cancel#groups')
                ]]
                await b_sts.edit(f"Groups groadcast in progress...\n\nTotal Groups: <code>{total_chats}</code>\nCompleted: <code>{done} / {total_chats}</code>\nSuccess: <code>{success}</code>\nFailed: <code>{failed}</code>", reply_markup=InlineKeyboardMarkup(btn))    
        await b_sts.edit(f"Groups broadcast completed.\nCompleted in {time_taken}\n\nTotal Groups: <code>{total_chats}</code>\nCompleted: <code>{done} / {total_chats}</code>\nSuccess: <code>{success}</code>\nFailed: <code>{failed}</code>")
